const DEBUG_DISABLE_ENDPOINTS=!1,DEBUG_DISABLE_NOAPI_ALERT=!1,DEBUG_DISABLE_ONREADY=!1,DEBUG_DISABLE_LOGGING=1;DEBUG_DISABLE_LOGGING&&(window.console.log=function(){});const PENDING_REQUEST_QUEUE={sample:[]};function queueRequest(e,t,a=[]){queueRequestAsync(e,t,a)}async function queueRequestAsync(e,t,a=[]){if(e in PENDING_REQUEST_QUEUE)return 1<=PENDING_REQUEST_QUEUE[e].length?PENDING_REQUEST_QUEUE[e][1]=[t,a]:PENDING_REQUEST_QUEUE[e].push([t,a]),void console.log("Queue exists, there should be some running requests in it, hence it is added to the queue.");for(console.log("Queue start!"),PENDING_REQUEST_QUEUE[e]=[[t,a]];e in PENDING_REQUEST_QUEUE&&0<PENDING_REQUEST_QUEUE[e].length;)await PENDING_REQUEST_QUEUE[e][0][0].apply(null,PENDING_REQUEST_QUEUE[e][0][1]),PENDING_REQUEST_QUEUE[e].shift(),console.log("Shifting queue...");delete PENDING_REQUEST_QUEUE[e],console.log("Queue done!")}const _404="./err/404uhoh.html",_503="./err/uhoh.html",loadingTextTakesLong="This takes longer than expected",loadingTextCountries="Loading Countries",loadingTextData="Getting latest COVID-19 Data",loadingTextProcess="Matching Entries",loadingTextComplete="Welcome",loadingLongDuration=15e3,loadingTimeout=3e4,noDataText="No Data",cannotGetDataText="-",smallNoDatatext="-",titlePrefix="COVID-19 Statistics",titleUnknown="Unknown",endpointCountries="https://restcountries.com/v3.1/all?fields=cca2,cca3,name,altSpellings",endpointCountries_pseudo="/pseudodata/country-data.json",endpointSpecificCountry="https://restcountries.com/v3.1/alpha/",endpointSpecificCountry_suffix="?fields=name",endpointFlags="https://flagcdn.com/24x18/",endpointCovidData="https://covid-19.dataflowkit.com/v1",endpointCovidData_pseudo="/pseudodata/covid19-stat.json",endpointCovidHistory_global="https://corona.lmao.ninja/v2/historical/all",endpointCovidHistory_country="https://corona.lmao.ninja/v2/historical/",endpointCovidHistory_filter_lastDays="?lastdays=",endpointLocation="https://api.country.is/",endpointFeedback_POST="https://c19webfeedback.requestcatcher.com/",banner_confirmedCases=document.getElementById("banner-confirmed-cases"),banner_deaths=document.getElementById("banner-deaths"),banner_recoveries=document.getElementById("banner-recoveries"),banner_recoverRate=document.getElementById("banner-recover-rate"),banner_fatalityRate=document.getElementById("banner-fatality-rate"),banner_currentCases=document.getElementById("banner-current-cases"),banner_lastUpdate=document.getElementById("last-update"),regionOptionButton=document.querySelector(".region-dropdown-button"),countryPrematches={"Channel Islands":0,CuraÃ§ao:"Curacao",CAR:"Central African Republic","St. Barth":"St. Barthelemy"},associatedCountries={je:"Channel Islands",gg:"Channel Islands"},notCountries=["Diamond Princess","MS Zaandam"];let countryData,covidData,dropdown,countryToCovidIndexes={},countryCodeToCovidIndexes={},covidToCountryIndexes={},covidGeneralizedIndexes={},requestTimedOut_country=!1,requestTimedOut_covid=!1;const regionDropdownElement=document.querySelector(".region-dropdown");let regionDropdownOptions;const localStatusReport=document.getElementById("local-status-report"),feedbackFormModalId="#feedback-form",feedbackSuccessModalId="#feedback-submitted",feedbackSubmitButton=document.getElementById("feedback-submit"),feedbackBodyElement=document.getElementById("feedback-input-body"),feedbackEmailNoticeLabel=document.getElementById("feedback-email-notice"),feedbackStatusNoticeLabel=document.getElementById("feedback-status-notice"),feedbackSuccessBody=document.getElementById("feedback-submitted-body");let localCC2="";const history_countryOptionElement=document.getElementById("history-country-options");let history_countrySelector={},history_currentlySelectedPeriod={cases:{isPeriodChosen:!1,lastDays:7,period:[0,1]},deaths:{isPeriodChosen:!1,lastDays:7,period:[0,1]}},history_covidCases={},history_covidDeaths={},history_covidCasesDiffed=!1,history_covidDeathsDiffed=!1;const history_covidCasesColor="#64a7ff",history_covidCasesColor_hover="#84caff",history_covidDeathsColor="#ff5566",history_covidDeathsColor_hover="#ff95a6",history_darkerGridColor="#2f2f2f",historyTime_casesEle=document.getElementById("history-time-cases-options"),historyTime_deathsEle=document.getElementById("history-time-deaths-options"),history_updateChartQueueKey="historyUpdateQueue",chart_fancyTooltipGetter=e=>{let t=e.canvas.parentNode.querySelector(".chart-tooltip");if(!t){t=document.createElement("div"),t.classList.add("chart-tooltip");const a=document.createElement("table");a.style.margin="0px",t.appendChild(a),e.canvas.parentNode.appendChild(t)}return t},chart_fancyTooltipHandler=e=>{const{chart:t,tooltip:a}=e,s=chart_fancyTooltipGetter(t);if(0===a.opacity)return void(s.style.opacity=0);if(a.body){const e=a.title||[],t=a.body.map(e=>e.lines),o=document.createElement("thead");e.forEach(e=>{const t=document.createElement("tr");t.style.borderWidth=0;const a=document.createElement("th");a.style.borderWidth=0,a.classList.add("chart-tooltip-header");const s=document.createTextNode(e);a.appendChild(s),t.appendChild(a),o.appendChild(t)});const n=document.createElement("tbody");t.forEach((e,t)=>{const s=a.labelColors[t],o=document.createElement("span");o.style.background=s.backgroundColor.substring(0,7),o.style.borderColor=s.borderColor,o.style.borderWidth="2px",o.style.marginRight="10px",o.style.height="10px",o.style.width="10px",o.style.display="inline-block";const d=document.createElement("tr");d.style.backgroundColor="inherit",d.style.borderWidth=0;const i=document.createElement("td");i.style.borderWidth=0,i.classList.add("chart-tooltip-context");const l=document.createTextNode(e);i.appendChild(o),i.appendChild(l),d.appendChild(i),n.appendChild(d)});const d=s.querySelector("table");for(;d.firstChild;)d.firstChild.remove();d.appendChild(o),d.appendChild(n)}const{offsetLeft:o,offsetTop:n}=t.canvas,d=t.canvas.getBoundingClientRect().width;s.style.opacity=1,s.style.top=n+a.caretY+"px",s.style.font=a.options.bodyFont.string,s.style.padding=a.options.padding+"px "+a.options.padding+"px",s.style.left=o+a.caretX+"px";s.getBoundingClientRect();d/2<o+a.caretX?s.classList.add("chart-tooltip-opposite"):s.classList.remove("chart-tooltip-opposite")},history_covidCasesChart=new Chart(document.getElementById("history-cases"),{type:"line",data:{labels:null,datasets:[{label:"Total Cases",data:[],backgroundColor:"#64a7ff",borderColor:"#64a7ff",hoverBorderColor:history_covidCasesColor_hover,borderWidth:1,pointBackgroundColor:fillString("#64a7ff",9,"0"),pointHoverBackgroundColor:history_covidCasesColor_hover,pointBorderWidth:0,fill:!0}]},options:{responsive:!0,aspectRatio:16/9,interaction:{intersect:!1,mode:"index"},scales:{x:{ticks:{callback:history_xAxisCallback},grid:{color:history_darkerGridColor}},y:{ticks:{callback:history_yAxisCallback,precision:0},beginAtZero:!1,min:0,grid:{color:history_darkerGridColor}}},plugins:{tooltip:{enabled:!1,position:"nearest",external:chart_fancyTooltipHandler,callbacks:{title:history_titleParseCallback}},legend:{display:!1}}}}),history_covidDeathsChart=new Chart(document.getElementById("history-deaths"),{type:"line",data:{labels:null,datasets:[{label:"Total Deaths",data:[],backgroundColor:history_covidDeathsColor,hoverBackgroundColor:history_covidDeathsColor_hover,hoverBorderColor:history_covidDeathsColor_hover,borderWidth:1,pointBackgroundColor:fillString(history_covidDeathsColor,9,"0"),pointHoverBackgroundColor:history_covidDeathsColor_hover,pointBorderWidth:0,fill:!0}]},options:{responsive:!0,aspectRatio:16/9,interaction:{intersect:!1,mode:"index"},scales:{x:{ticks:{callback:history_xAxisCallback},grid:{color:history_darkerGridColor}},y:{ticks:{callback:history_yAxisCallback,precision:0},beginAtZero:!1,min:0,grid:{color:history_darkerGridColor}}},plugins:{tooltip:{enabled:!1,position:"nearest",external:chart_fancyTooltipHandler,callbacks:{title:history_titleParseCallback}},legend:{display:!1}}}}),emailSubscribeNotice=document.getElementById("email-subscribe-notice"),emailSubscribeField=document.getElementById("email-subscribe-field"),emailSubscribeButton=document.getElementById("email-subscribe-btn");DEBUG_DISABLE_ONREADY||window.addEventListener("load",windowLoaded);const html=document.documentElement;async function windowLoaded(){const e=()=>i.textContent=loadingTextTakesLong;var t,a,s=[],o=!0;let n=document.querySelector(".loading-screen"),d=document.querySelector(".loading-screen .web-hidden"),i=document.querySelector(".loading-text");d.classList.remove("web-hidden"),i.textContent=loadingTextCountries;let l=setTimeout(e,loadingLongDuration);var r=[endpointCountries],c=checkQuery();if(t=c.cca2,t&&("string"==typeof t||t instanceof String)&&(t=t.toLowerCase(),r.push(endpointSpecificCountry+t+endpointSpecificCountry_suffix),console.log(`Selected country code detected: ${t}`)),await Promise.all(r.map(async e=>{var t;try{t=await fetchTimeout(e,{timeout:loadingTimeout}).then(e=>e.json()),e===endpointCountries?(console.log("Country data retrieved"),countryData=t):(console.log("Selected country data retrieved"),a=t.name.common)}catch(t){e===endpointCountries?(console.log("Request Timeout: Countries"),requestTimedOut_country=!0):(console.log("Request Timeout: Selected Country"),o=!1)}return t})),requestTimedOut_country)try{countryData=await fetchTimeout(endpointCountries_pseudo,{timeout:loadingTimeout}).then(e=>e.json()),console.log("Country pseudodata retrieved"),requestTimedOut_country=!1,s.push("Country Information")}catch(e){console.log("Request Timeout: Country Pseudodata"),window.location.href=_503}clearTimeout(l),i.textContent=loadingTextData,l=setTimeout(e,loadingLongDuration);try{covidData=await fetchTimeout(endpointCovidData,{timeout:loadingTimeout}).then(e=>e.json()),console.log("COVID19 data retrieved")}catch(e){console.log("Request Timeout: COVID19 Data"),requestTimedOut_covid=!0}if(requestTimedOut_covid)try{covidData=await fetchTimeout(endpointCovidData_pseudo,{timeout:loadingTimeout}).then(e=>e.json()),console.log("COVID19 pseudodata retrieved"),requestTimedOut_covid=!1,s.push("Current COVID-19 Statistics")}catch(e){console.log("Request Timeout: COVID19 Pseudodata"),window.location.href=_503}if(clearTimeout(l),i.textContent=loadingTextProcess,countryData&&covidData){const e=(t,a)=>{var s=0,o=0,n=0,d=!1,i=t=>{if(!d&&t){if(t.constructor==Object||Array.isArray(t)){const[s,i,l]=e(t,a,Array.isArray(t));return 1===s&&(d=!0),o+=i,void(n+=l)}if(!("string"==typeof t||t instanceof String))return;if([...t].some(e=>127<e.charCodeAt(0)))return;var s=similar(t.toLowerCase(),a.toLowerCase());1==s&&(d=!0),o+=s,n++}};return Array.isArray(t)?t.forEach(e=>{i(e)}):Object.entries(t).forEach(e=>{const[t,a]=e;i(a)}),s=o/n,d&&(s=1),[s,o,n]},t=e=>{var t=0,a=0;return Object.entries(e).forEach(e=>{const[s,o]=e;a<o&&(a=o,t=s)}),t};var u="",h={};covidData.forEach((a,s)=>{if(!("Country_text"in a))return;const o={};var n=a.Country_text;if("world"===n.toLowerCase())return void(u=`
                <a class="country-option btn btn-dark px-3 py-2 web-bg-slightly-darker-hoverable text-white border-dark" data-id="${s}">
                    <div class="row align-items-center align-content-center justify-content-center web-disable-capture">
                        <i class="fa fa-globe"></i>
                        <p class="ml-3 mb-0"> Worldwide</p>
                    </div>
                </a>`);if(n in countryPrematches){if(0===countryPrematches[n])return covidGeneralizedIndexes[n]=s,void(h[n]=`
                    <a class="country-option btn btn-dark px-3 py-2 web-bg-slightly-darker-hoverable text-white border-dark" data-id="-1" data-id-str="${n}">
                        <div class="d-flex flex-row align-items-center align-content-center justify-content-center web-disable-capture">
                            <p class="mb-0">${n}</p>
                        </div>
                    </a>
                    `);n=countryPrematches[n],console.log(`Maybe ${a.Country_text} is ${n}?`)}if(notCountries.includes(n))return void console.log(`Skipped one.`);countryData.forEach((t,a)=>{var[s,d,d]=e(t,n);o[a]=s});var d=t(o),i=countryData[d].cca2.toLowerCase(),l=countryData[d].name.common;(1!==o[d]||n!=a.Country_text)&&console.log(`Matched "${l}" with COVID-19 Index ${s} (Index's Country: ${a.Country_text}) (Confidence: ${o[d]})`),countryToCovidIndexes[d]=s,countryCodeToCovidIndexes[i]=s,covidToCountryIndexes[s]=d,h[l]=`
            <a class="country-option btn btn-dark px-3 py-2 web-bg-slightly-darker-hoverable text-white border-dark" data-id="${s}">
                <div class="d-flex flex-row align-items-center align-content-center justify-content-center web-disable-capture">
                    <img
                    src="https://flagcdn.com/24x18/${i}.png"
                    srcset="https://flagcdn.com/48x36/${i}.png 2x,
                        https://flagcdn.com/72x54/${i}.png 3x"
                    width="24"
                    height="18"
                    alt="${l}">
                    <p class="ml-3 mb-0">${l}</p>
                </div>
            </a>
            `});var f=Object.keys(h);f.sort(),f.forEach(e=>{u+=h[e]}),regionDropdownElement.innerHTML=u}if(regionDropdownOptions=document.querySelectorAll(".country-option"),regionDropdownOptions.forEach(e=>{e.addEventListener("click",onRegionOptionClick)}),console.log(countryToCovidIndexes),t?t in countryCodeToCovidIndexes?displayData(countryCodeToCovidIndexes[t],null,!0):t in associatedCountries?displayData(-1,associatedCountries[t],null,!0):(displayData(9999,null,!0),regionOptionButton.innerHTML=o?`
                    <img
                    src="https://flagcdn.com/24x18/${t}.png"
                    srcset="https://flagcdn.com/48x36/${t}.png 2x,
                        https://flagcdn.com/72x54/${t}.png 3x"
                    width="24"
                    height="18"
                    alt="${a}">
                    <span class="web-text-fluid-lead ml-3"> ${a}</span>
                    `:`
                    <span class="web-text-fluid-lead"> Unknown Area</span>
                    `):displayData(0,null,!0),0<s.length&&!DEBUG_DISABLE_NOAPI_ALERT){var y=document.querySelector(".alert-something"),p=document.querySelector(".loaded-placeholder-data-names"),b="";s.forEach(e=>{b+=`<li>${e}</li>`}),p.innerHTML=b,y.classList.remove("web-hidden"),y.classList.remove("web-disable-capture")}await updateLocalData(),resizeChartOnResize(null,window.outerWidth),i.textContent=loadingTextComplete,n.classList.add("web-hidden"),n.classList.add("web-disable-capture"),document.body.classList.remove("overflow-hidden")}async function fetchTimeout(e,t={}){const{timeout:a=8e3,retryLimit:s=5,retryDelay:o=0,throwExceptionOnFail:n=!0,acceptOnly200:d=!0,breakAt404:i=!1}=t;for(var l,r,c,u=s,h=!1;0<=u;)try{l=new AbortController,r=setTimeout(()=>l.abort(),a);var f=!1;if(c=await fetch(e,{...t,signal:l.signal}).then(e=>{if(i&&404===e.status)throw u=-1,"404 not found encountered with retry bypass allowed, stopped future retry attempts.";return d&&200!=e.status||!d&&(200>e.status||299<e.status)?f=!0:u=-1,e}),f)throw`Response not OK, ${c.status} instead`}catch(e){if(clearTimeout(r),r=null,0<u)console.log("Retrying..."),u--,0<o&&(await delayAsync(o));else{h=!0;break}}if(r&&clearTimeout(r),n&&h)throw`Exceeded retry times! Also ${err}`;return c}function getKeyLength(e){return Object.keys(e).length}function displayData(e=-1,t="",a=!1){try{if(!!requestTimedOut_covid)history.replaceState({},"","/"),regionOptionButton.innerHTML=`<span class="web-text-fluid-lead"> N/A</span>`,updateBannerStats(),queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{countrySelectors:{"":!0}},{showDifference:a,forceFail:!0,forceFailMessage:"Unable to fulfill request."}]),document.title=`${titlePrefix} - ${titleUnknown}`,banner_confirmedCases.textContent=cannotGetDataText,banner_deaths.textContent=cannotGetDataText,banner_recoveries.textContent=cannotGetDataText;else if(0<getKeyLength(covidData)){if(e>=covidData.length)return document.title=`${titlePrefix} - ${titleUnknown}`,history.replaceState({},"","/"),void updateBannerStats();if(0<=e){if(e in covidData){const t=covidData[e];var s="";if(0==e)history.replaceState({},"","/"),document.title=`${titlePrefix} - Worldwide`,regionOptionButton.innerHTML="<i class=\"fa fa-globe\"></i><span class=\"web-text-fluid-lead ml-3\"> Worldwide</span>";else{s=countryData[covidToCountryIndexes[e]].cca2.toLowerCase();var o=countryData[covidToCountryIndexes[e]].name.common;document.title=`${titlePrefix} - ${o}`,history.replaceState({},"",`?cca2=${s}`),regionOptionButton.innerHTML=`
                        <img
                        src="https://flagcdn.com/24x18/${s}.png"
                        srcset="https://flagcdn.com/48x36/${s}.png 2x,
                            https://flagcdn.com/72x54/${s}.png 3x"
                        width="24"
                        height="18"
                        alt="${o}">
                        <span class="web-text-fluid-lead ml-3"> ${o}</span>
                        `}updateBannerStats(t),queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{countrySelectors:{[s]:!0}},{showDifference:a}])}else history.replaceState({},"","/"),document.title=`${titlePrefix} - ${titleUnknown}`,updateBannerStats(),queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{countrySelectors:{"":!0}},{showDifference:a,forceFail:!0,forceFailMessage:"No data."}]);}else if(t in covidGeneralizedIndexes){const e=covidData[covidGeneralizedIndexes[t]];document.title=`${titlePrefix} - ${t}`,regionOptionButton.innerHTML=`
                    <span class="web-text-fluid-lead"> ${t}</span>
                    `,history.replaceState({},"","/"),updateBannerStats(e);let s=getKeysByValue(associatedCountries,t);if(s&&0<s.length){let e={};s.forEach((t,a)=>{e[t]=0===a}),queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{countrySelectors:e},{showDifference:a}])}else queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{countrySelectors:{"":!0}},{showDifference:a,forceFail:!0,forceFailMessage:`Unable to load historical data for ${t}.`}])}else history.replaceState({},"","/"),document.title=`${titlePrefix} - ${titleUnknown}`,updateBannerStats(),queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{countrySelectors:{"":!0}},{showDifference:a,forceFail:!0,forceFailMessage:"No data."}])}else history.replaceState({},"","/"),document.title=`${titlePrefix} - ${titleUnknown}`,regionOptionButton.innerHTML=`<span class="web-text-fluid-lead"> N/A</span>`,updateBannerStats(),queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{countrySelectors:{"":!0}},{showDifference:a,forceFail:!0,forceFailMessage:"No data."}])}catch(e){console.log(`Caught error while attempting to display data: ${e}`),window.location.href=_503}}function updateBannerStats(e=null){if(!e)banner_confirmedCases.textContent=noDataText,banner_deaths.textContent=noDataText,banner_recoveries.textContent=noDataText,banner_recoverRate.textContent=smallNoDatatext,banner_fatalityRate.textContent=smallNoDatatext,banner_currentCases.textContent=smallNoDatatext,banner_lastUpdate.textContent=`Last Update: Unknown`;else{var t=getCovidTotalCases(e,!0),a=getCovidTotalRecoveries(e,!0),s=getCovidTotalDeaths(e,!0);banner_confirmedCases.textContent=isNaN(t)?smallNoDatatext:t.toLocaleString(),banner_deaths.textContent=isNaN(s)?smallNoDatatext:s.toLocaleString(),banner_recoveries.textContent=isNaN(a)?smallNoDatatext:a.toLocaleString();var o=0===t?1:a/t,n=isNaN(o),d=0===t?0:s/t,i=isNaN(d);banner_recoverRate.textContent=n?"Unknown":`${`${100*o}`.substring(0,5)}%`,banner_fatalityRate.textContent=i?"Unknown":`${`${100*d}`.substring(0,5)}%`,banner_currentCases.textContent=n||i?"Unknown":(t-(a+s)).toLocaleString();var l=!0;isNaN(Date.parse(getCovidLastUpdate(e)))&&(l=!1);var r=!0;isNaN(Date.parse(getCovidDatabaseLastUpdate()))&&(r=!1),banner_lastUpdate.innerHTML=`Last Update: ${l?`${getCovidLastUpdate(e)} (GMT)`:r?`${getCovidDatabaseLastUpdate()} (GMT) <i class="fa fa-question-circle"></i><span class="web-tooltiptext">Latest update time of the entire database.</span>`:"Unknown"}`}}function history_xAxisCallback(e){return getReadableDate_en(new Date(this.getLabelForValue(e)),"us"===localCC2,!0)}function history_yAxisCallback(e){return shortenNumber(e)}function history_titleParseCallback(e){if(e&&0<e.length){let t=e[0].label;return t&&(t=getReadableDate_en(new Date(t),"us"===localCC2)),t}}function resizeChartOnResize(e,a=0){var s,o=e?e.currentTarget:null,t=!1;s=document.body.clientWidth,s||(o?s=o.outerWidth:s=e.outerWidth),992>=s&&(console.log("using 3:4"),t=!0);var n=document.querySelectorAll(".chart-data");n.forEach(e=>{t?(history_covidCasesChart.options.aspectRatio=3/4,history_covidDeathsChart.options.aspectRatio=3/4,e.classList.contains("web-h-ratio-16-9")&&e.classList.remove("web-h-ratio-16-9"),!e.classList.contains("web-h-ratio-3-4")&&e.classList.add("web-h-ratio-3-4")):(history_covidCasesChart.options.aspectRatio=16/9,history_covidDeathsChart.options.aspectRatio=16/9,e.classList.contains("web-h-ratio-3-4")&&e.classList.remove("web-h-ratio-3-4"),!e.classList.contains("web-h-ratio-16-9")&&e.classList.add("web-h-ratio-16-9"))})}function toggleCovidCasesDaily(e=!1){if(history_covidCasesDiffed&&!e){console.log("Toggled Off");var t=Object.keys(history_covidCases);updateHistoryChartData(history_covidCasesChart,t,{datalist:{"Total Cases":t.map(e=>history_covidCases[e])},dataOnly:!0,skips:1})}else console.log("Toggled On"),applyDataDiffOnHistoricalChart(history_covidCasesChart,{newLabels:["New Cases"],fullDataArray:[Object.values(history_covidCases)]});history_covidCasesDiffed=!!e||!history_covidCasesDiffed}function toggleCovidDeathsDaily(e=!1){if(history_covidDeathsDiffed&&!e){console.log("Toggled Off");var t=Object.keys(history_covidDeaths);updateHistoryChartData(history_covidDeathsChart,t,{datalist:{"Total Deaths":t.map(e=>history_covidDeaths[e])},dataOnly:!0,skips:1})}else console.log("Toggled On (deaths)"),applyDataDiffOnHistoricalChart(history_covidDeathsChart,{newLabels:["New Deaths"],fullDataArray:[Object.values(history_covidDeaths)]});history_covidDeathsDiffed=!!e||!history_covidDeathsDiffed}function selectAnotherCountryInSelector(e){e in history_countrySelector&&Object.keys(history_countrySelector).forEach(t=>{history_countrySelector[t]=!1,t===e&&(history_countrySelector[t]=!0)})}function isCountrySelectedInSelector(e){return!!(e in history_countrySelector)&&history_countrySelector[e]}async function updateHistoryStatsFrom({countrySelectors:e=null,period:t=null},{updateOnly:a="",forceFail:s=!1,forceFailMessage:o="No data.",showDifference:n=!1}={}){let d=!0;var i=(e,t="")=>{console.log("updateHistoryStatsFrom(): Callback called from both");let a=document.getElementById("history-cases-overlay"),s=document.getElementById("history-deaths-overlay");historyTime_casesEle.classList.contains("web-disable-capture")&&historyTime_casesEle.classList.remove("web-disable-capture"),historyTime_deathsEle.classList.contains("web-disable-capture")&&historyTime_deathsEle.classList.remove("web-disable-capture"),e?(!a.classList.contains("web-disable-capture")&&a.classList.add("web-disable-capture"),!a.classList.contains("web-hidden")&&a.classList.add("web-hidden"),!s.classList.contains("web-disable-capture")&&s.classList.add("web-disable-capture"),!s.classList.contains("web-hidden")&&s.classList.add("web-hidden")):(a.querySelector(".chart-status").innerHTML=`<span class="d-table-cell web-valign-middle">${t}</span>`,s.querySelector(".chart-status").innerHTML=`<span class="d-table-cell web-valign-middle">${t}</span>`)};const l=(e,t="")=>{console.log("updateHistoryStatsFrom(): Callback called from ONLY cases");let a=document.getElementById("history-cases-overlay");historyTime_casesEle.classList.contains("web-disable-capture")&&historyTime_casesEle.classList.remove("web-disable-capture"),e?(!a.classList.contains("web-disable-capture")&&a.classList.add("web-disable-capture"),!a.classList.contains("web-hidden")&&a.classList.add("web-hidden")):a.querySelector(".chart-status").innerHTML=`<span class="d-table-cell web-valign-middle">${t}</span>`},r=(e,t="")=>{console.log("updateHistoryStatsFrom(): Callback called from ONLY deaths");let a=document.getElementById("history-deaths-overlay");historyTime_deathsEle.classList.contains("web-disable-capture")&&historyTime_deathsEle.classList.remove("web-disable-capture"),e?(!a.classList.contains("web-disable-capture")&&a.classList.add("web-disable-capture"),!a.classList.contains("web-hidden")&&a.classList.add("web-hidden")):a.querySelector(".chart-status").innerHTML=`<span class="d-table-cell web-valign-middle">${t}</span>`};if(0<a.length&&"cases"===a||""===a){let e=document.getElementById("history-cases-overlay");e.querySelector(".chart-status").innerHTML=`<span class="d-table-cell web-valign-middle">Loading...</span>`,historyTime_casesEle.classList.contains("web-disable-capture")||historyTime_casesEle.classList.add("web-disable-capture"),e.classList.contains("web-disable-capture")&&e.classList.remove("web-disable-capture"),e.classList.contains("web-hidden")&&e.classList.remove("web-hidden"),""!==a&&(i=l)}if(0<a.length&&"deaths"===a||""===a){let e=document.getElementById("history-deaths-overlay");e.querySelector(".chart-status").innerHTML=`<span class="d-table-cell web-valign-middle">Loading...</span>`,historyTime_deathsEle.classList.contains("web-disable-capture")||historyTime_deathsEle.classList.add("web-disable-capture"),e.classList.contains("web-disable-capture")&&e.classList.remove("web-disable-capture"),e.classList.contains("web-hidden")&&e.classList.remove("web-hidden"),""!==a&&(i=r)}let c,u;t&&(1===t.length?c=t[0]:1<t.length&&(u=t));let h="";if(e){let t="";await Promise.all(Object.keys(e).map(async a=>{a in e&&e[a]&&(""===a?h=a:0>=h.length&&(h=a));var s="Unknown";if(console.log(`EXAMINING CC2: ${a}`),""!==a){var o;try{o=await fetchTimeout(endpointSpecificCountry+a+endpointSpecificCountry_suffix,{timeout:loadingTimeout}).then(e=>e.json())}catch(e){console.log("Failed to load country for history chart")}o&&"name"in o&&(s=o.name.common?o.name.common:"Unknown"),console.log(`Received name (${s}) from country info: ${o}`)}else s="Worldwide";t+=`<button class="web-option-switch${h===a?" web-option-switch-enabled":""} web-option-switch-fancy lead" data-option-group="history-country" data-id="${a}"><span>${s}</span></button>`,console.log(t)})),history_countrySelector=e,0===t.length&&(t="<button class=\"web-option-switch web-option-switch-enabled web-option-switch-fancy lead\" data-option-group=\"history-country\" data-id=\"\"><span>Undefined</span></button>"),history_countryOptionElement.innerHTML=t,console.log("Received and replaced"),history_countryOptionElement.querySelectorAll(".web-option-switch").forEach(e=>{e.addEventListener("click",()=>{var t=e.getAttribute("data-id");isCountrySelectedInSelector(t)||(selectAnotherCountryInSelector(t),queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{}]))})})}else breakableForEach(Object.keys(history_countrySelector),e=>{if(e in history_countrySelector&&history_countrySelector[e])return h=e,!1});if(c)(0<a.length&&"cases"===a||""===a)&&(history_currentlySelectedPeriod.cases.isPeriodChosen=!1,history_currentlySelectedPeriod.cases.lastDays=c),(0<a.length&&"deaths"===a||""===a)&&(history_currentlySelectedPeriod.deaths.isPeriodChosen=!1,history_currentlySelectedPeriod.deaths.lastDays=c),await updateHistoryStats(h,{lastDays:c,updateOnly:a,loadNewData:d,forceFail:s,forceFailMessage:o,showDifference:n,onCompleteCallback:i});else if(u)(0<a.length&&"cases"===a||""===a)&&(history_currentlySelectedPeriod.cases.isPeriodChosen=!0,history_currentlySelectedPeriod.cases.period=u),(0<a.length&&"deaths"===a||""===a)&&(history_currentlySelectedPeriod.deaths.isPeriodChosen=!0,history_currentlySelectedPeriod.deaths.period=u),await updateHistoryStats(h,{customRange:u,updateOnly:a,loadNewData:d,forceFail:s,forceFailMessage:o,showDifference:n,onCompleteCallback:i});else if(0<a.length&&"cases"===a&&(history_currentlySelectedPeriod.cases.isPeriodChosen?await updateHistoryStats(h,{customRange:history_currentlySelectedPeriod.cases.period,updateOnly:"cases",loadNewData:d,forceFail:s,forceFailMessage:o,showDifference:n,onCompleteCallback:l}):await updateHistoryStats(h,{lastDays:history_currentlySelectedPeriod.cases.lastDays,updateOnly:"cases",loadNewData:d,forceFail:s,forceFailMessage:o,showDifference:n,onCompleteCallback:l})),0<a.length&&"deaths"===a&&(history_currentlySelectedPeriod.deaths.isPeriodChosen?await updateHistoryStats(h,{customRange:history_currentlySelectedPeriod.deaths.period,updateOnly:"deaths",loadNewData:d,forceFail:s,forceFailMessage:o,showDifference:n,onCompleteCallback:r}):await updateHistoryStats(h,{lastDays:history_currentlySelectedPeriod.deaths.lastDays,updateOnly:"deaths",loadNewData:d,forceFail:s,forceFailMessage:o,showDifference:n,onCompleteCallback:r})),!(0<a.length&&"cases"===a)&&!(0<a.length&&"deaths"===a)){let e=!0,t=o;history_currentlySelectedPeriod.cases.isPeriodChosen?({success:e,error:t}=await updateHistoryStats(h,{customRange:history_currentlySelectedPeriod.cases.period,updateOnly:"cases",updateAllVariablesRegardless:!0,loadNewData:d,forceFail:s,forceFailMessage:o,showDifference:n,onCompleteCallback:l})):({success:e,error:t}=await updateHistoryStats(h,{lastDays:history_currentlySelectedPeriod.cases.lastDays,updateOnly:"cases",updateAllVariablesRegardless:!0,loadNewData:d,forceFail:s,forceFailMessage:o,showDifference:n,onCompleteCallback:l})),d=!(!0===history_currentlySelectedPeriod.cases.isPeriodChosen&&!0===history_currentlySelectedPeriod.deaths.isPeriodChosen&&arrayElementEquals(history_currentlySelectedPeriod.cases.period,history_currentlySelectedPeriod.deaths.period)||history_currentlySelectedPeriod.cases.isPeriodChosen===history_currentlySelectedPeriod.deaths.isPeriodChosen&&history_currentlySelectedPeriod.cases.lastDays===history_currentlySelectedPeriod.deaths.lastDays),history_currentlySelectedPeriod.deaths.isPeriodChosen?await updateHistoryStats(h,{customRange:history_currentlySelectedPeriod.deaths.period,updateOnly:"deaths",loadNewData:d,forceFail:s||!e,forceFailMessage:e?o:t,showDifference:n,onCompleteCallback:r}):await updateHistoryStats(h,{lastDays:history_currentlySelectedPeriod.deaths.lastDays,updateOnly:"deaths",loadNewData:d,forceFail:s||!e,forceFailMessage:e?o:t,showDifference:n,onCompleteCallback:r})}}async function updateHistoryStats(e="",{lastDays:t=30,customRange:a=[],showDifference:s=!1,loadNewData:o=!0,forceFail:n=!1,updateOnly:d="",updateAllVariablesRegardless:i=!1,forceFailMessage:l="No data.",onCompleteCallback:r=()=>{}}={}){var c=!0,u="Unable to load historical chart.";const h=5,f=100;0>=t&&(t=30),t++;var y=0===e.length?endpointCovidHistory_global:endpointCovidHistory_country+e;console.log(y);var p;const b="##";if(!!n)console.log(`force fail loading history stats requested for "${e}".`),u=l,p=null;else if(o)try{if(2<=a.length){console.log("Date range found"),a.sort();const e=a[0],s=a[1];if(e===s||e>s)throw`${b}Invalid date range!`;var g;if(g=await fetchTimeout(`${y+endpointCovidHistory_filter_lastDays}${1}`,{method:"GET",mode:"cors",headers:{},timeout:loadingTimeout,retryLimit:h,retryDelay:f,breakAt404:!0}).then(e=>e.json()).then(e=>"timeline"in e?e.timeline:e),!g)throw`Yesterday data fetch failed`;if(!("cases"in g))throw`Yesterday data has no 'casses' entry, data might be unclean`;else if(yesterdayTick=Date.parse(Object.keys(g.cases)[0]),!!isNaN(yesterdayTick))throw"Cannot get unix time of yesterday data";else if(0>=yesterdayTick-e)throw`${b}Sorry, there is no data during this period.`;else t=Math.floor((yesterdayTick-e)/86400000);var m=await fetchTimeout(`${y+endpointCovidHistory_filter_lastDays}${t}`,{method:"GET",mode:"cors",headers:{},timeout:loadingTimeout,retryLimit:h,retryDelay:f,breakAt404:!0}).then(e=>e.json()).then(e=>"timeline"in e?e.timeline:e),C={};if("cases"in m){var w=Object.keys(m.cases).filter(t=>t>=e&&t<=s).sort();w.forEach(e=>{C[e]=m.cases[e]}),console.log("Cases history filtered")}if("deaths"in m){var w=Object.keys(m.deaths).filter(t=>t>=e&&t<=s).sort();w.forEach(e=>{C[e]=m.deaths[e]}),console.log("Deaths history filtered")}p={cases:C,deaths:{}}}else p=await fetchTimeout(`${y+endpointCovidHistory_filter_lastDays}${t}`,{method:"GET",mode:"cors",headers:{},timeout:loadingTimeout,retryLimit:h,retryDelay:f,breakAt404:!0}).then(e=>e.json()).then(e=>"timeline"in e?e.timeline:e),console.log(`History stat for "${e}" during the last ${t} day${1<t?"s":""} loaded.`)}catch(t){console.log(`Cannot load history stats for "${e}".`),(t instanceof String||"string"==typeof t)&&t.startsWith(b)&&(u=t.substring(b.length-1)),p=null}else console.log("Requested to not load new history data to reduce API calls."),history_covidCases&&history_covidDeaths&&(p={cases:history_covidCases,deaths:history_covidDeaths});if(p){if(i&&(history_covidCases=p.cases,history_covidDeaths=p.deaths),(0<d.length&&"cases"===d||""===d)&&"cases"in p){history_covidCases=p.cases;var L=Object.keys(history_covidCases);updateHistoryChartData(history_covidCasesChart,L,{dataLabel:"Total Cases",data:L.map(e=>history_covidCases[e]),skips:1,dataOnly:!0}),(s&&!history_covidCasesDiffed||history_covidCasesDiffed)&&toggleCovidCasesDaily(!0),console.log("Historical chart data for cases updated")}if((0<d.length&&"deaths"===d||""===d)&&"deaths"in p){history_covidDeaths=p.deaths;var L=Object.keys(history_covidDeaths);updateHistoryChartData(history_covidDeathsChart,L,{dataLabel:"Total Deaths",data:L.map(e=>history_covidDeaths[e]),skips:1,dataOnly:!0}),(s&&!history_covidDeathsDiffed||history_covidDeathsDiffed)&&toggleCovidDeathsDaily(!0),console.log("Historical chart data for deaths updated")}console.log("Historical chart data assigned: "+p)}else c=!1,(0<d.length&&"cases"===d||""===d)&&(history_covidCases={},updateHistoryChartData(history_covidCasesChart,"",{dataLabel:"Total Cases",data:[],dataOnly:!0}),(s&&!history_covidCasesDiffed||history_covidCasesDiffed)&&toggleCovidCasesDaily(!0)),(0<d.length&&"deaths"===d||""===d)&&(history_covidDeaths={},updateHistoryChartData(history_covidDeathsChart,L,{dataLabel:"Total Deaths",data:[],dataOnly:!0}),(s&&!history_covidDeathsDiffed||history_covidDeathsDiffed)&&toggleCovidDeathsDaily(!0)),console.log("Historical chart data is reset to blank");return r(c,u),{success:c,error:u}}function updateHistoryChartData(e,t,{data:a,datalist:s,dataOnly:d=!1,dataLabel:o,datasets:n,bgColor:l="#fafafa",hoverBgColor:r="#ffffff",borderWidth:c=1,pointBorderWidth:u=0,fill:h=!0,skips:f=0}={}){for(var y=f;0<y;)t.shift(),y--;if(e.data.labels=t,!!n)e.data.datasets=n,(a||o||s)&&console.warn("data/dataLabel/datalist found in List input while datasets is used. By default, datasets will be used. Please include those data in datasets!"),d&&console.warn("dataOnly only works on data/datalist while datasets is defined, no effects were made");else if(a&&o){for(var p=f;0<p;)a.shift(),p--;d?e.data.datasets&&0<e.data.datasets.length?(e.data.datasets[0].label=o,e.data.datasets[0].data=a):e.data.datasets=[{label:o,data:a}]:e.data.datasets=[{label:o,data:a,backgroundColor:l,borderColor:l,hoverBorderColor:r,borderWidth:c,pointBackgroundColor:fillString(l,9,"0"),pointHoverBackgroundColor:r,pointBorderWidth:u,fill:h}]}else if(s){console.log(`Datalist detected: ${e} ${s}`);const t=Object.keys(s);t.forEach((t,a)=>{const o=t,n=s[t];console.log(`Found: ${o} = ${n}`);for(var i=f;0<i;)n.shift(),i--;e.data.datasets||(e.data.datasets=[]),d?(console.log("Data only!"),e.data.datasets.length<a?(console.log("appending"),e.data.datasets.push({label:o,data:n})):(console.log("overwriting"),e.data.datasets[a].label=o,e.data.datasets[a].data=n)):e.data.datasets.length<a?e.data.datasets.push({label:o,data:n,backgroundColor:l,borderColor:l,hoverBorderColor:r,borderWidth:c,pointBackgroundColor:fillString(l,9,"0"),pointHoverBackgroundColor:r,pointBorderWidth:u,fill:h}):e.data.datasets[a]={label:o,data:n,backgroundColor:l,borderColor:l,hoverBorderColor:r,borderWidth:c,pointBackgroundColor:fillString(l,9,"0"),pointHoverBackgroundColor:r,pointBorderWidth:u,fill:h}})}else console.warn("History chart data was not provided with enough information! Please include EITHER [data AND dataLabel], OR just [datasets], OR provide a full datalist.");e.update()}function applyDataDiffOnHistoricalChart(e,{newLabels:t=[],fullDataArray:a=null}){var s=!0;null===a&&(console.warn(`Full data list is not provided for enabling data displacement. Using chart's existing data instead. This may be required to calculate the full result and not make the chart look off-putting`),s=!1),e.data.datasets=e.data.datasets.map((e,o)=>{if(console.log(t),t.length>o&&(console.log(`Replaced label with: ${t[o]}`),e.label=t[o]),s&&(e.data=a[o]),e.data){var n=[];console.log(`dataEntries.data = ${e.data}`),e.data.forEach((t,a)=>{if(0<a){var s=e.data[a-1];("number"==typeof s||Number.isFinite(s))&&("number"==typeof t||Number.isFinite(t))?n.push(t-s):n.push(null)}}),e.data=n}return e}),e.update()}async function updateLocalData(){var e;try{e=await fetchTimeout(endpointLocation,{timeout:loadingTimeout}).then(e=>e.json())}catch(e){console.log("Unable to get local data.")}if(e){var t,a=e.country.toLowerCase();localCC2=a;try{t=await fetchTimeout(endpointSpecificCountry+a+endpointSpecificCountry_suffix,{timeout:loadingTimeout}).then(e=>e.json())}catch(e){console.log("Unable to get country information."),localStatusReport.innerHTML="Unable to get local COVID-19 information. It is recommended to take precautionary steps beforehand."}var s=()=>{var e,s=getCovidData(getCovidIdFromCountryCode(a)),o=getCovidTotalCases(s,!0),n=getCovidTotalRecoveries(s,!0),d=getCovidTotalDeaths(s,!0),i=getCovidLastUpdate(s),l=!0,r=!0,c=!0,u=!0;o||(l=!1),n||(r=!1),d||(c=!1),i?0>=i.length?u=!1:(e=new Date(i),e?isNaN(e)&&(u=!1):u=!1):u=!1,console.log("Generating local status report now");var h=`${l?`There is a total of <span class="web-big-boy">${o.toLocaleString()}</span> confirmed case${1<o?"s":""} of COVID-19 in ${t.name.common}.`:`There are no concrete data of COVID-19 cases in ${t.name.common}.`}<br><br>${u?`As of ${getReadableDate_en(e,"us"===a)} (GMT)`:`At some point in time`}, <span class="web-big-boy recovered-value">${r?n.toLocaleString():`an uncertain amount of patients`}</span> has recovered, while <span class="web-big-boy deaths-value">${c?`${d.toLocaleString()}</span>`:`an uncertain amount</span> of`} death${c&&1<d||!c?"s":""} have been recorded.<br><br>${l&&r&&c?`<span class="web-big-boy">${(o-(n+d)).toLocaleString()}</span> patient${1<o-(n+d)?"s":""} are currently active.`:`It is unknown how many active cases there are in ${t.name.common} ever since last update.`}`;localStatusReport.innerHTML=h+`<br><br><a class="web-color-light-blue" id="local-more-info" href="#" data-id-code="${a}">Click here for more information.</a>`;var f=document.getElementById("local-more-info");if(f){var y,p,b=f.getAttribute("data-id-code");b in countryCodeToCovidIndexes?y=countryCodeToCovidIndexes[b]:b in associatedCountries&&associatedCountries[b]in covidGeneralizedIndexes&&(p=associatedCountries[b]);var y=getCovidIdFromCountryCode(b);p?f.addEventListener("click",function(){displayData(-1,p)}):y?f.addEventListener("click",function(){displayData(y)}):localStatusReport.innerHTML=h}};t&&(a in countryCodeToCovidIndexes?s():a in associatedCountries?s():localStatusReport.innerHTML=`Good news! There are no known cases of COVID-19 in ${t.name.common}. Although everything may be safe for now, you should always be prepared and take preliminary measures, just in case.`)}else localStatusReport.innerHTML="Unable to get local COVID-19 information. It is recommended to take precautionary steps beforehand."}function getCovidData(e){return covidData[e]}function getCovidTotalCases(e,t=!1){return t?parseInt(e["Total Cases_text"].replaceAll(",","")):e["Total Cases_text"]}function getCovidTotalRecoveries(e,t=!1){return t?parseInt(e["Total Recovered_text"].replaceAll(",","")):e["Total Recovered_text"]}function getCovidTotalDeaths(e,t=!1){return t?parseInt(e["Total Deaths_text"].replaceAll(",","")):e["Total Deaths_text"]}function getCovidLastUpdate(e){return e["Last Update"]}function getCovidDatabaseLastUpdate(){if(covidData){var e=covidData[covidData.length-1];if("Last Update"in e)return e["Last Update"]}return null}function getCovidIdFromCountryCode(e){return(e=e.toLowerCase(),e in countryCodeToCovidIndexes)?countryCodeToCovidIndexes[e]:e in associatedCountries&&associatedCountries[e]in covidGeneralizedIndexes?covidGeneralizedIndexes[associatedCountries[e]]:null}async function tryGoTo(e){try{await fetchTimeout(e,{timeout:9e4}).then(e=>{console.log(e.status),200!=e.status&&(window.location.href=_404)})}catch(e){window.location.href=_404}}const feedbackTitle=feedbackBodyElement.querySelector(".feedback-title"),feedbackContent=feedbackBodyElement.querySelector(".feedback-contents"),feedbackEmail=feedbackBodyElement.querySelector(".feedback-your-email"),feedbackStyleResetOnEvent=function(){this.style.cssText=""},feedbackEmailValidateOnEvent=function(){return 0<this.value.trim().length&&!validateEmail(this.value)?(feedbackEmailNoticeLabel.style.color="#ff5566",feedbackEmailNoticeLabel.textContent=" - Invalid email address.",void(this.style.borderColor="#ff5566")):void(feedbackEmailNoticeLabel.textContent="",feedbackStyleResetOnEvent.apply(feedbackEmailNoticeLabel),feedbackStyleResetOnEvent.apply(this))};var isFeedbackSubmitting=!1;feedbackTitle.addEventListener("focus",feedbackStyleResetOnEvent),feedbackContent.addEventListener("focus",feedbackStyleResetOnEvent),feedbackEmail.addEventListener("focus",feedbackStyleResetOnEvent),feedbackEmail.addEventListener("focusout",feedbackEmailValidateOnEvent),$(feedbackFormModalId).on("show.bs.modal",()=>{feedbackTitle.style.cssText="",feedbackContent.style.cssText="",feedbackEmail.style.cssText="",feedbackStatusNoticeLabel.style.cssText="",feedbackStatusNoticeLabel.textContent="",feedbackEmailValidateOnEvent.apply(feedbackEmail)}),feedbackSubmitButton.addEventListener("click",async()=>{if(isFeedbackSubmitting)return;isFeedbackSubmitting=!0,feedbackTitle.setAttribute("disabled",""),feedbackContent.setAttribute("disabled",""),feedbackEmail.setAttribute("disabled",""),feedbackSubmitButton.setAttribute("disabled",""),feedbackStatusNoticeLabel.style.cssText="",feedbackStatusNoticeLabel.textContent=`Submitting feedback...`;const e="web-anim-shakeyshakey",t=250;if(!feedbackTitle||!feedbackContent||!feedbackEmail)return $(feedbackFormModalId).one("hidden.bs.modal",function(){$(feedbackSuccessModalId).modal("show")}),feedbackTitle&&feedbackTitle.removeAttribute("disabled"),feedbackContent&&feedbackContent.removeAttribute("disabled"),feedbackEmail&&feedbackEmail.removeAttribute("disabled"),feedbackSubmitButton.removeAttribute("disabled"),feedbackSuccessBody.innerHTML=`<p>Something went wrong. We sincerely apologize for the inconvenience. Please send your feedback here for now: please contact <a class="web-color-light-blue" style="cursor: pointer;" onclick="tryGoTo('./email.html')">2159015@example.com</a>.</p>`,$(feedbackFormModalId).modal("hide"),void(isFeedbackSubmitting=!1);let a=!0;0>=feedbackTitle.value.trim().length?(a=!1,feedbackTitle.value="",feedbackTitle.style.borderColor="#ff5566",!feedbackTitle.classList.contains("web-anim-shakeyshakey")&&(feedbackTitle.classList.add("web-anim-shakeyshakey"),setTimeout(()=>{feedbackTitle.classList.remove(e)},t))):feedbackStyleResetOnEvent.apply(feedbackTitle),0>=feedbackContent.value.trim().length?(a=!1,feedbackContent.value="",feedbackContent.style.borderColor="#ff5566",!feedbackContent.classList.contains("web-anim-shakeyshakey")&&(feedbackContent.classList.add("web-anim-shakeyshakey"),setTimeout(()=>{feedbackContent.classList.remove(e)},t))):feedbackStyleResetOnEvent.apply(feedbackContent),0<feedbackEmail.value.trim().length&&!validateEmail(feedbackEmail.value)&&(a=!1,feedbackEmail.classList.add("web-anim-shakeyshakey"),setTimeout(()=>{feedbackEmail.classList.remove(e)},t));let s=!0;if(a){const e={email:feedbackEmail.value,title:feedbackTitle.value,feedback:feedbackContent.value};try{await fetchTimeout(endpointFeedback_POST,{timeout:loadingTimeout,acceptOnly200:!1,retryLimit:0,throwExceptionOnFail:!1,method:"POST",mode:"no-cors",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>{200<=e.status&&299>=e.status&&(feedbackStatusNoticeLabel.style.color="#ff5566",feedbackStatusNoticeLabel.textContent=`Server Error (${e.status})`,s=!1)})}catch(e){feedbackStatusNoticeLabel.style.color="#ff5566",feedbackStatusNoticeLabel.textContent=`Unknown Error: ${e}`,s=!1}s&&(feedbackSuccessBody.innerHTML=`<p>Thank you for your feedback! For additional inquiries, please contact <a class="web-color-light-blue" style="cursor: pointer;" onclick="tryGoTo('./email.html')">2159015@example.com</a>.</p>`,$(feedbackFormModalId).one("hidden.bs.modal",function(){feedbackEmail.value="",feedbackTitle.value="",feedbackContent.value="",$(feedbackSuccessModalId).modal("show")}),$(feedbackFormModalId).modal("hide"))}s&&(feedbackStatusNoticeLabel.style.cssText="",feedbackStatusNoticeLabel.textContent=""),feedbackTitle.removeAttribute("disabled"),feedbackContent.removeAttribute("disabled"),feedbackEmail.removeAttribute("disabled"),feedbackSubmitButton.removeAttribute("disabled"),isFeedbackSubmitting=!1}),window.addEventListener("resize",resizeChartOnResize),document.getElementById("toggle-diff-cases").onclick=function(){toggleCovidCasesDaily()},document.getElementById("toggle-diff-deaths").onclick=function(){toggleCovidDeathsDaily()},historyTime_casesEle.addEventListener("click",function(e){let t=e.target;if(t&&t.classList.contains("web-option-switch")){let e="cases";switch(t.getAttribute("data-id")){case"weekly":(7!==history_currentlySelectedPeriod.cases.lastDays||history_currentlySelectedPeriod.cases.isPeriodChosen)&&queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{period:[7]},{updateOnly:e}]);break;case"monthly":(30!==history_currentlySelectedPeriod.cases.lastDays||history_currentlySelectedPeriod.cases.isPeriodChosen)&&queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{period:[30]},{updateOnly:e}]);break;case"annually":(365!==history_currentlySelectedPeriod.cases.lastDays||history_currentlySelectedPeriod.cases.isPeriodChosen)&&queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{period:[365]},{updateOnly:e}]);break;case"all-time":let a=Math.floor(daysSince(new Date(2020,1,1)));(history_currentlySelectedPeriod.cases.lastDays!==a||history_currentlySelectedPeriod.cases.isPeriodChosen)&&queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{period:[a]},{updateOnly:e}]);break;case"custom":console.warn("Feature not yet implemented");break;default:}}}),historyTime_deathsEle.addEventListener("click",function(e){let t=e.target;if(t&&t.classList.contains("web-option-switch")){let e="deaths";switch(t.getAttribute("data-id")){case"weekly":(7!==history_currentlySelectedPeriod.deaths.lastDays||history_currentlySelectedPeriod.deaths.isPeriodChosen)&&queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{period:[7]},{updateOnly:e}]);break;case"monthly":(30!==history_currentlySelectedPeriod.deaths.lastDays||history_currentlySelectedPeriod.deaths.isPeriodChosen)&&queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{period:[30]},{updateOnly:e}]);break;case"annually":(365!==history_currentlySelectedPeriod.deaths.lastDays||history_currentlySelectedPeriod.deaths.isPeriodChosen)&&queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{period:[365]},{updateOnly:e}]);break;case"all-time":let a=Math.floor(daysSince(new Date(2020,1,1)));console.log(`Days since then: ${a}`),(history_currentlySelectedPeriod.deaths.lastDays!==a||history_currentlySelectedPeriod.deaths.isPeriodChosen)&&queueRequest(history_updateChartQueueKey,updateHistoryStatsFrom,[{period:[a]},{updateOnly:e}]);break;case"custom":console.warn("Feature not yet implemented");break;default:}}}),emailSubscribeButton.addEventListener("click",()=>{0===emailSubscribeField.value.length?(emailSubscribeNotice.innerHTML=" - Required field",emailSubscribeNotice.style.color="#ff0000",emailSubscribeNotice.style.fontStyle="italic",emailSubscribeField.style.borderColor="#ff0000"):validateEmail(emailSubscribeField.value)?(emailSubscribeNotice.innerHTML=" - Subscribed!",emailSubscribeNotice.style.color="#00ff00",emailSubscribeNotice.style.fontStyle="normal",emailSubscribeField.style.borderColor="#00ff00"):(emailSubscribeNotice.innerHTML=" - Please enter a valid email address",emailSubscribeNotice.style.color="#ff0000",emailSubscribeNotice.style.fontStyle="italic",emailSubscribeField.style.borderColor="#ff0000")});function onRegionOptionClick(e){console.log(`Selected region: ${e.target.getAttribute("data-id")}`);var t=e.target.getAttribute("data-id"),t=parseInt(t);if(0>t){var a=e.target.getAttribute("data-id-str");displayData(t,a)}else displayData(t)}